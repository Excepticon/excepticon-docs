### YamlMime:ManagedReference
items:
- uid: Excepticon.Model.HttpRequestData
  commentId: T:Excepticon.Model.HttpRequestData
  id: HttpRequestData
  parent: Excepticon.Model
  children:
  - Excepticon.Model.HttpRequestData.#ctor(Microsoft.AspNetCore.Http.HttpContext)
  - Excepticon.Model.HttpRequestData.Cookies
  - Excepticon.Model.HttpRequestData.Headers
  - Excepticon.Model.HttpRequestData.Host
  - Excepticon.Model.HttpRequestData.Method
  - Excepticon.Model.HttpRequestData.Path
  - Excepticon.Model.HttpRequestData.Protocol
  - Excepticon.Model.HttpRequestData.Query
  - Excepticon.Model.HttpRequestData.QueryString
  - Excepticon.Model.HttpRequestData.Scheme
  - Excepticon.Model.HttpRequestData.Session
  langs:
  - csharp
  - vb
  name: HttpRequestData
  nameWithType: HttpRequestData
  fullName: Excepticon.Model.HttpRequestData
  type: Class
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: HttpRequestData
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 7
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public class HttpRequestData
    content.vb: Public Class HttpRequestData
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Excepticon.Model.HttpRequestData.#ctor(Microsoft.AspNetCore.Http.HttpContext)
  commentId: M:Excepticon.Model.HttpRequestData.#ctor(Microsoft.AspNetCore.Http.HttpContext)
  id: '#ctor(Microsoft.AspNetCore.Http.HttpContext)'
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: HttpRequestData(HttpContext)
  nameWithType: HttpRequestData.HttpRequestData(HttpContext)
  fullName: Excepticon.Model.HttpRequestData.HttpRequestData(Microsoft.AspNetCore.Http.HttpContext)
  type: Constructor
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: .ctor
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 9
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public HttpRequestData(HttpContext context)
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Http.HttpContext
    content.vb: Public Sub New(context As HttpContext)
  overload: Excepticon.Model.HttpRequestData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Excepticon.Model.HttpRequestData.Cookies
  commentId: P:Excepticon.Model.HttpRequestData.Cookies
  id: Cookies
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Cookies
  nameWithType: HttpRequestData.Cookies
  fullName: Excepticon.Model.HttpRequestData.Cookies
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Cookies
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 33
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public IDictionary<string, string> Cookies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Cookies As IDictionary(Of String, String)
  overload: Excepticon.Model.HttpRequestData.Cookies*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Headers
  commentId: P:Excepticon.Model.HttpRequestData.Headers
  id: Headers
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Headers
  nameWithType: HttpRequestData.Headers
  fullName: Excepticon.Model.HttpRequestData.Headers
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Headers
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 35
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public IDictionary<string, string> Headers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Headers As IDictionary(Of String, String)
  overload: Excepticon.Model.HttpRequestData.Headers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Host
  commentId: P:Excepticon.Model.HttpRequestData.Host
  id: Host
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: HttpRequestData.Host
  fullName: Excepticon.Model.HttpRequestData.Host
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Host
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 37
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Host As String
  overload: Excepticon.Model.HttpRequestData.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Method
  commentId: P:Excepticon.Model.HttpRequestData.Method
  id: Method
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: HttpRequestData.Method
  fullName: Excepticon.Model.HttpRequestData.Method
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Method
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 39
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string Method { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Method As String
  overload: Excepticon.Model.HttpRequestData.Method*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Path
  commentId: P:Excepticon.Model.HttpRequestData.Path
  id: Path
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: HttpRequestData.Path
  fullName: Excepticon.Model.HttpRequestData.Path
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Path
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 41
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string Path { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Path As String
  overload: Excepticon.Model.HttpRequestData.Path*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Protocol
  commentId: P:Excepticon.Model.HttpRequestData.Protocol
  id: Protocol
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Protocol
  nameWithType: HttpRequestData.Protocol
  fullName: Excepticon.Model.HttpRequestData.Protocol
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Protocol
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 43
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string Protocol { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Protocol As String
  overload: Excepticon.Model.HttpRequestData.Protocol*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Query
  commentId: P:Excepticon.Model.HttpRequestData.Query
  id: Query
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Query
  nameWithType: HttpRequestData.Query
  fullName: Excepticon.Model.HttpRequestData.Query
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Query
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 45
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public IDictionary<string, string> Query { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Query As IDictionary(Of String, String)
  overload: Excepticon.Model.HttpRequestData.Query*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Session
  commentId: P:Excepticon.Model.HttpRequestData.Session
  id: Session
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Session
  nameWithType: HttpRequestData.Session
  fullName: Excepticon.Model.HttpRequestData.Session
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Session
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 47
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public IDictionary<string, string> Session { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Session As IDictionary(Of String, String)
  overload: Excepticon.Model.HttpRequestData.Session*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.QueryString
  commentId: P:Excepticon.Model.HttpRequestData.QueryString
  id: QueryString
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: QueryString
  nameWithType: HttpRequestData.QueryString
  fullName: Excepticon.Model.HttpRequestData.QueryString
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: QueryString
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 49
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string QueryString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property QueryString As String
  overload: Excepticon.Model.HttpRequestData.QueryString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.HttpRequestData.Scheme
  commentId: P:Excepticon.Model.HttpRequestData.Scheme
  id: Scheme
  parent: Excepticon.Model.HttpRequestData
  langs:
  - csharp
  - vb
  name: Scheme
  nameWithType: HttpRequestData.Scheme
  fullName: Excepticon.Model.HttpRequestData.Scheme
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/HttpRequestData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Scheme
    path: ../excepticon-dotnet/src/Excepticon/Model/HttpRequestData.cs
    startLine: 51
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string Scheme { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Scheme As String
  overload: Excepticon.Model.HttpRequestData.Scheme*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Excepticon.Model
  commentId: N:Excepticon.Model
  name: Excepticon.Model
  nameWithType: Excepticon.Model
  fullName: Excepticon.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Excepticon.Model.HttpRequestData.#ctor*
  commentId: Overload:Excepticon.Model.HttpRequestData.#ctor
  name: HttpRequestData
  nameWithType: HttpRequestData.HttpRequestData
  fullName: Excepticon.Model.HttpRequestData.HttpRequestData
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: Microsoft.AspNetCore.Http.HttpContext
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: Excepticon.Model.HttpRequestData.Cookies*
  commentId: Overload:Excepticon.Model.HttpRequestData.Cookies
  name: Cookies
  nameWithType: HttpRequestData.Cookies
  fullName: Excepticon.Model.HttpRequestData.Cookies
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Excepticon.Model.HttpRequestData.Headers*
  commentId: Overload:Excepticon.Model.HttpRequestData.Headers
  name: Headers
  nameWithType: HttpRequestData.Headers
  fullName: Excepticon.Model.HttpRequestData.Headers
- uid: Excepticon.Model.HttpRequestData.Host*
  commentId: Overload:Excepticon.Model.HttpRequestData.Host
  name: Host
  nameWithType: HttpRequestData.Host
  fullName: Excepticon.Model.HttpRequestData.Host
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Excepticon.Model.HttpRequestData.Method*
  commentId: Overload:Excepticon.Model.HttpRequestData.Method
  name: Method
  nameWithType: HttpRequestData.Method
  fullName: Excepticon.Model.HttpRequestData.Method
- uid: Excepticon.Model.HttpRequestData.Path*
  commentId: Overload:Excepticon.Model.HttpRequestData.Path
  name: Path
  nameWithType: HttpRequestData.Path
  fullName: Excepticon.Model.HttpRequestData.Path
- uid: Excepticon.Model.HttpRequestData.Protocol*
  commentId: Overload:Excepticon.Model.HttpRequestData.Protocol
  name: Protocol
  nameWithType: HttpRequestData.Protocol
  fullName: Excepticon.Model.HttpRequestData.Protocol
- uid: Excepticon.Model.HttpRequestData.Query*
  commentId: Overload:Excepticon.Model.HttpRequestData.Query
  name: Query
  nameWithType: HttpRequestData.Query
  fullName: Excepticon.Model.HttpRequestData.Query
- uid: Excepticon.Model.HttpRequestData.Session*
  commentId: Overload:Excepticon.Model.HttpRequestData.Session
  name: Session
  nameWithType: HttpRequestData.Session
  fullName: Excepticon.Model.HttpRequestData.Session
- uid: Excepticon.Model.HttpRequestData.QueryString*
  commentId: Overload:Excepticon.Model.HttpRequestData.QueryString
  name: QueryString
  nameWithType: HttpRequestData.QueryString
  fullName: Excepticon.Model.HttpRequestData.QueryString
- uid: Excepticon.Model.HttpRequestData.Scheme*
  commentId: Overload:Excepticon.Model.HttpRequestData.Scheme
  name: Scheme
  nameWithType: HttpRequestData.Scheme
  fullName: Excepticon.Model.HttpRequestData.Scheme
