### YamlMime:ManagedReference
items:
- uid: Excepticon.Logging.LoggingBuilderExtensions
  commentId: T:Excepticon.Logging.LoggingBuilderExtensions
  id: LoggingBuilderExtensions
  parent: Excepticon.Logging
  children:
  - Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder)
  - Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Excepticon.Options.ExcepticonOptions})
  - Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
  langs:
  - csharp
  - vb
  name: LoggingBuilderExtensions
  nameWithType: LoggingBuilderExtensions
  fullName: Excepticon.Logging.LoggingBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Excepticon/Logging/LoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: LoggingBuilderExtensions
    path: ../excepticon-dotnet/src/Excepticon/Logging/LoggingBuilderExtensions.cs
    startLine: 12
  assemblies:
  - Excepticon
  namespace: Excepticon.Logging
  syntax:
    content: public static class LoggingBuilderExtensions
    content.vb: Public Module LoggingBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder)
  commentId: M:Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder)
  id: AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder)
  isExtensionMethod: true
  parent: Excepticon.Logging.LoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddExcepticon(ILoggingBuilder)
  nameWithType: LoggingBuilderExtensions.AddExcepticon(ILoggingBuilder)
  fullName: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder)
  type: Method
  source:
    remote:
      path: src/Excepticon/Logging/LoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: AddExcepticon
    path: ../excepticon-dotnet/src/Excepticon/Logging/LoggingBuilderExtensions.cs
    startLine: 14
  assemblies:
  - Excepticon
  namespace: Excepticon.Logging
  syntax:
    content: public static ILoggingBuilder AddExcepticon(this ILoggingBuilder builder)
    parameters:
    - id: builder
      type: Microsoft.Extensions.Logging.ILoggingBuilder
    return:
      type: Microsoft.Extensions.Logging.ILoggingBuilder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddExcepticon(builder As ILoggingBuilder) As ILoggingBuilder
  overload: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
  commentId: M:Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
  id: AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
  isExtensionMethod: true
  parent: Excepticon.Logging.LoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddExcepticon(ILoggingBuilder, String)
  nameWithType: LoggingBuilderExtensions.AddExcepticon(ILoggingBuilder, String)
  fullName: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Excepticon/Logging/LoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: AddExcepticon
    path: ../excepticon-dotnet/src/Excepticon/Logging/LoggingBuilderExtensions.cs
    startLine: 18
  assemblies:
  - Excepticon
  namespace: Excepticon.Logging
  syntax:
    content: public static ILoggingBuilder AddExcepticon(this ILoggingBuilder builder, string excepticonApiKey)
    parameters:
    - id: builder
      type: Microsoft.Extensions.Logging.ILoggingBuilder
    - id: excepticonApiKey
      type: System.String
    return:
      type: Microsoft.Extensions.Logging.ILoggingBuilder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddExcepticon(builder As ILoggingBuilder, excepticonApiKey As String) As ILoggingBuilder
  overload: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Excepticon.Options.ExcepticonOptions})
  commentId: M:Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Excepticon.Options.ExcepticonOptions})
  id: AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Excepticon.Options.ExcepticonOptions})
  isExtensionMethod: true
  parent: Excepticon.Logging.LoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddExcepticon(ILoggingBuilder, Action<ExcepticonOptions>)
  nameWithType: LoggingBuilderExtensions.AddExcepticon(ILoggingBuilder, Action<ExcepticonOptions>)
  fullName: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<Excepticon.Options.ExcepticonOptions>)
  type: Method
  source:
    remote:
      path: src/Excepticon/Logging/LoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: AddExcepticon
    path: ../excepticon-dotnet/src/Excepticon/Logging/LoggingBuilderExtensions.cs
    startLine: 23
  assemblies:
  - Excepticon
  namespace: Excepticon.Logging
  syntax:
    content: public static ILoggingBuilder AddExcepticon(this ILoggingBuilder builder, Action<ExcepticonOptions> optionsConfiguration)
    parameters:
    - id: builder
      type: Microsoft.Extensions.Logging.ILoggingBuilder
    - id: optionsConfiguration
      type: System.Action{Excepticon.Options.ExcepticonOptions}
    return:
      type: Microsoft.Extensions.Logging.ILoggingBuilder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddExcepticon(builder As ILoggingBuilder, optionsConfiguration As Action(Of ExcepticonOptions)) As ILoggingBuilder
  overload: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon*
  nameWithType.vb: LoggingBuilderExtensions.AddExcepticon(ILoggingBuilder, Action(Of ExcepticonOptions))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action(Of Excepticon.Options.ExcepticonOptions))
  name.vb: AddExcepticon(ILoggingBuilder, Action(Of ExcepticonOptions))
references:
- uid: Excepticon.Logging
  commentId: N:Excepticon.Logging
  name: Excepticon.Logging
  nameWithType: Excepticon.Logging
  fullName: Excepticon.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon*
  commentId: Overload:Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon
  name: AddExcepticon
  nameWithType: LoggingBuilderExtensions.AddExcepticon
  fullName: Excepticon.Logging.LoggingBuilderExtensions.AddExcepticon
- uid: Microsoft.Extensions.Logging.ILoggingBuilder
  commentId: T:Microsoft.Extensions.Logging.ILoggingBuilder
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILoggingBuilder
  nameWithType: ILoggingBuilder
  fullName: Microsoft.Extensions.Logging.ILoggingBuilder
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action{Excepticon.Options.ExcepticonOptions}
  commentId: T:System.Action{Excepticon.Options.ExcepticonOptions}
  parent: System
  definition: System.Action`1
  name: Action<ExcepticonOptions>
  nameWithType: Action<ExcepticonOptions>
  fullName: System.Action<Excepticon.Options.ExcepticonOptions>
  nameWithType.vb: Action(Of ExcepticonOptions)
  fullName.vb: System.Action(Of Excepticon.Options.ExcepticonOptions)
  name.vb: Action(Of ExcepticonOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Excepticon.Options.ExcepticonOptions
    name: ExcepticonOptions
    nameWithType: ExcepticonOptions
    fullName: Excepticon.Options.ExcepticonOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Excepticon.Options.ExcepticonOptions
    name: ExcepticonOptions
    nameWithType: ExcepticonOptions
    fullName: Excepticon.Options.ExcepticonOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
