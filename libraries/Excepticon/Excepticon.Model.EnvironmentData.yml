### YamlMime:ManagedReference
items:
- uid: Excepticon.Model.EnvironmentData
  commentId: T:Excepticon.Model.EnvironmentData
  id: EnvironmentData
  parent: Excepticon.Model
  children:
  - Excepticon.Model.EnvironmentData.#ctor
  - Excepticon.Model.EnvironmentData.#ctor(Microsoft.AspNetCore.Http.HttpContext)
  - Excepticon.Model.EnvironmentData.AspNetCoreFeatures
  - Excepticon.Model.EnvironmentData.CurrentDirectory
  - Excepticon.Model.EnvironmentData.EnvironmentVariables
  langs:
  - csharp
  - vb
  name: EnvironmentData
  nameWithType: EnvironmentData
  fullName: Excepticon.Model.EnvironmentData
  type: Class
  source:
    remote:
      path: src/Excepticon/Model/EnvironmentData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: EnvironmentData
    path: ../excepticon-dotnet/src/Excepticon/Model/EnvironmentData.cs
    startLine: 8
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public class EnvironmentData
    content.vb: Public Class EnvironmentData
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Excepticon.Model.EnvironmentData.#ctor(Microsoft.AspNetCore.Http.HttpContext)
  commentId: M:Excepticon.Model.EnvironmentData.#ctor(Microsoft.AspNetCore.Http.HttpContext)
  id: '#ctor(Microsoft.AspNetCore.Http.HttpContext)'
  parent: Excepticon.Model.EnvironmentData
  langs:
  - csharp
  - vb
  name: EnvironmentData(HttpContext)
  nameWithType: EnvironmentData.EnvironmentData(HttpContext)
  fullName: Excepticon.Model.EnvironmentData.EnvironmentData(Microsoft.AspNetCore.Http.HttpContext)
  type: Constructor
  source:
    remote:
      path: src/Excepticon/Model/EnvironmentData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: .ctor
    path: ../excepticon-dotnet/src/Excepticon/Model/EnvironmentData.cs
    startLine: 10
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public EnvironmentData(HttpContext context)
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Http.HttpContext
    content.vb: Public Sub New(context As HttpContext)
  overload: Excepticon.Model.EnvironmentData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Excepticon.Model.EnvironmentData.#ctor
  commentId: M:Excepticon.Model.EnvironmentData.#ctor
  id: '#ctor'
  parent: Excepticon.Model.EnvironmentData
  langs:
  - csharp
  - vb
  name: EnvironmentData()
  nameWithType: EnvironmentData.EnvironmentData()
  fullName: Excepticon.Model.EnvironmentData.EnvironmentData()
  type: Constructor
  source:
    remote:
      path: src/Excepticon/Model/EnvironmentData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: .ctor
    path: ../excepticon-dotnet/src/Excepticon/Model/EnvironmentData.cs
    startLine: 18
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public EnvironmentData()
    content.vb: Public Sub New
  overload: Excepticon.Model.EnvironmentData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Excepticon.Model.EnvironmentData.AspNetCoreFeatures
  commentId: P:Excepticon.Model.EnvironmentData.AspNetCoreFeatures
  id: AspNetCoreFeatures
  parent: Excepticon.Model.EnvironmentData
  langs:
  - csharp
  - vb
  name: AspNetCoreFeatures
  nameWithType: EnvironmentData.AspNetCoreFeatures
  fullName: Excepticon.Model.EnvironmentData.AspNetCoreFeatures
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/EnvironmentData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: AspNetCoreFeatures
    path: ../excepticon-dotnet/src/Excepticon/Model/EnvironmentData.cs
    startLine: 28
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public IList<string> AspNetCoreFeatures { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public ReadOnly Property AspNetCoreFeatures As IList(Of String)
  overload: Excepticon.Model.EnvironmentData.AspNetCoreFeatures*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.EnvironmentData.EnvironmentVariables
  commentId: P:Excepticon.Model.EnvironmentData.EnvironmentVariables
  id: EnvironmentVariables
  parent: Excepticon.Model.EnvironmentData
  langs:
  - csharp
  - vb
  name: EnvironmentVariables
  nameWithType: EnvironmentData.EnvironmentVariables
  fullName: Excepticon.Model.EnvironmentData.EnvironmentVariables
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/EnvironmentData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: EnvironmentVariables
    path: ../excepticon-dotnet/src/Excepticon/Model/EnvironmentData.cs
    startLine: 30
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public IDictionary<string, string> EnvironmentVariables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property EnvironmentVariables As IDictionary(Of String, String)
  overload: Excepticon.Model.EnvironmentData.EnvironmentVariables*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Excepticon.Model.EnvironmentData.CurrentDirectory
  commentId: P:Excepticon.Model.EnvironmentData.CurrentDirectory
  id: CurrentDirectory
  parent: Excepticon.Model.EnvironmentData
  langs:
  - csharp
  - vb
  name: CurrentDirectory
  nameWithType: EnvironmentData.CurrentDirectory
  fullName: Excepticon.Model.EnvironmentData.CurrentDirectory
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/EnvironmentData.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: CurrentDirectory
    path: ../excepticon-dotnet/src/Excepticon/Model/EnvironmentData.cs
    startLine: 32
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string CurrentDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CurrentDirectory As String
  overload: Excepticon.Model.EnvironmentData.CurrentDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Excepticon.Model
  commentId: N:Excepticon.Model
  name: Excepticon.Model
  nameWithType: Excepticon.Model
  fullName: Excepticon.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Excepticon.Model.EnvironmentData.#ctor*
  commentId: Overload:Excepticon.Model.EnvironmentData.#ctor
  name: EnvironmentData
  nameWithType: EnvironmentData.EnvironmentData
  fullName: Excepticon.Model.EnvironmentData.EnvironmentData
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: Microsoft.AspNetCore.Http.HttpContext
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: Excepticon.Model.EnvironmentData.AspNetCoreFeatures*
  commentId: Overload:Excepticon.Model.EnvironmentData.AspNetCoreFeatures
  name: AspNetCoreFeatures
  nameWithType: EnvironmentData.AspNetCoreFeatures
  fullName: Excepticon.Model.EnvironmentData.AspNetCoreFeatures
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Excepticon.Model.EnvironmentData.EnvironmentVariables*
  commentId: Overload:Excepticon.Model.EnvironmentData.EnvironmentVariables
  name: EnvironmentVariables
  nameWithType: EnvironmentData.EnvironmentVariables
  fullName: Excepticon.Model.EnvironmentData.EnvironmentVariables
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Excepticon.Model.EnvironmentData.CurrentDirectory*
  commentId: Overload:Excepticon.Model.EnvironmentData.CurrentDirectory
  name: CurrentDirectory
  nameWithType: EnvironmentData.CurrentDirectory
  fullName: Excepticon.Model.EnvironmentData.CurrentDirectory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
