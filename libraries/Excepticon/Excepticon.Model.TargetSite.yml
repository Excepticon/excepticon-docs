### YamlMime:ManagedReference
items:
- uid: Excepticon.Model.TargetSite
  commentId: T:Excepticon.Model.TargetSite
  id: TargetSite
  parent: Excepticon.Model
  children:
  - Excepticon.Model.TargetSite.#ctor(System.Reflection.MethodBase)
  - Excepticon.Model.TargetSite.DeclaringTypeFullName
  - Excepticon.Model.TargetSite.DeclaringTypeName
  - Excepticon.Model.TargetSite.MemberType
  - Excepticon.Model.TargetSite.Name
  langs:
  - csharp
  - vb
  name: TargetSite
  nameWithType: TargetSite
  fullName: Excepticon.Model.TargetSite
  type: Class
  source:
    remote:
      path: src/Excepticon/Model/TargetSite.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: TargetSite
    path: ../excepticon-dotnet/src/Excepticon/Model/TargetSite.cs
    startLine: 4
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public class TargetSite
    content.vb: Public Class TargetSite
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Excepticon.Model.TargetSite.#ctor(System.Reflection.MethodBase)
  commentId: M:Excepticon.Model.TargetSite.#ctor(System.Reflection.MethodBase)
  id: '#ctor(System.Reflection.MethodBase)'
  parent: Excepticon.Model.TargetSite
  langs:
  - csharp
  - vb
  name: TargetSite(MethodBase)
  nameWithType: TargetSite.TargetSite(MethodBase)
  fullName: Excepticon.Model.TargetSite.TargetSite(System.Reflection.MethodBase)
  type: Constructor
  source:
    remote:
      path: src/Excepticon/Model/TargetSite.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: .ctor
    path: ../excepticon-dotnet/src/Excepticon/Model/TargetSite.cs
    startLine: 6
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public TargetSite(MethodBase targetSite)
    parameters:
    - id: targetSite
      type: System.Reflection.MethodBase
    content.vb: Public Sub New(targetSite As MethodBase)
  overload: Excepticon.Model.TargetSite.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Excepticon.Model.TargetSite.DeclaringTypeName
  commentId: P:Excepticon.Model.TargetSite.DeclaringTypeName
  id: DeclaringTypeName
  parent: Excepticon.Model.TargetSite
  langs:
  - csharp
  - vb
  name: DeclaringTypeName
  nameWithType: TargetSite.DeclaringTypeName
  fullName: Excepticon.Model.TargetSite.DeclaringTypeName
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/TargetSite.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: DeclaringTypeName
    path: ../excepticon-dotnet/src/Excepticon/Model/TargetSite.cs
    startLine: 14
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string DeclaringTypeName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DeclaringTypeName As String
  overload: Excepticon.Model.TargetSite.DeclaringTypeName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Excepticon.Model.TargetSite.DeclaringTypeFullName
  commentId: P:Excepticon.Model.TargetSite.DeclaringTypeFullName
  id: DeclaringTypeFullName
  parent: Excepticon.Model.TargetSite
  langs:
  - csharp
  - vb
  name: DeclaringTypeFullName
  nameWithType: TargetSite.DeclaringTypeFullName
  fullName: Excepticon.Model.TargetSite.DeclaringTypeFullName
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/TargetSite.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: DeclaringTypeFullName
    path: ../excepticon-dotnet/src/Excepticon/Model/TargetSite.cs
    startLine: 16
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string DeclaringTypeFullName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DeclaringTypeFullName As String
  overload: Excepticon.Model.TargetSite.DeclaringTypeFullName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Excepticon.Model.TargetSite.MemberType
  commentId: P:Excepticon.Model.TargetSite.MemberType
  id: MemberType
  parent: Excepticon.Model.TargetSite
  langs:
  - csharp
  - vb
  name: MemberType
  nameWithType: TargetSite.MemberType
  fullName: Excepticon.Model.TargetSite.MemberType
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/TargetSite.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: MemberType
    path: ../excepticon-dotnet/src/Excepticon/Model/TargetSite.cs
    startLine: 18
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public MemberTypes MemberType { get; set; }
    parameters: []
    return:
      type: System.Reflection.MemberTypes
    content.vb: Public Property MemberType As MemberTypes
  overload: Excepticon.Model.TargetSite.MemberType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Excepticon.Model.TargetSite.Name
  commentId: P:Excepticon.Model.TargetSite.Name
  id: Name
  parent: Excepticon.Model.TargetSite
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: TargetSite.Name
  fullName: Excepticon.Model.TargetSite.Name
  type: Property
  source:
    remote:
      path: src/Excepticon/Model/TargetSite.cs
      branch: master
      repo: https://github.com/Excepticon/excepticon-dotnet.git
    id: Name
    path: ../excepticon-dotnet/src/Excepticon/Model/TargetSite.cs
    startLine: 20
  assemblies:
  - Excepticon
  namespace: Excepticon.Model
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Excepticon.Model.TargetSite.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Excepticon.Model
  commentId: N:Excepticon.Model
  name: Excepticon.Model
  nameWithType: Excepticon.Model
  fullName: Excepticon.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Excepticon.Model.TargetSite.#ctor*
  commentId: Overload:Excepticon.Model.TargetSite.#ctor
  name: TargetSite
  nameWithType: TargetSite.TargetSite
  fullName: Excepticon.Model.TargetSite.TargetSite
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Excepticon.Model.TargetSite.DeclaringTypeName*
  commentId: Overload:Excepticon.Model.TargetSite.DeclaringTypeName
  name: DeclaringTypeName
  nameWithType: TargetSite.DeclaringTypeName
  fullName: Excepticon.Model.TargetSite.DeclaringTypeName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Excepticon.Model.TargetSite.DeclaringTypeFullName*
  commentId: Overload:Excepticon.Model.TargetSite.DeclaringTypeFullName
  name: DeclaringTypeFullName
  nameWithType: TargetSite.DeclaringTypeFullName
  fullName: Excepticon.Model.TargetSite.DeclaringTypeFullName
- uid: Excepticon.Model.TargetSite.MemberType*
  commentId: Overload:Excepticon.Model.TargetSite.MemberType
  name: MemberType
  nameWithType: TargetSite.MemberType
  fullName: Excepticon.Model.TargetSite.MemberType
- uid: System.Reflection.MemberTypes
  commentId: T:System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: true
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: Excepticon.Model.TargetSite.Name*
  commentId: Overload:Excepticon.Model.TargetSite.Name
  name: Name
  nameWithType: TargetSite.Name
  fullName: Excepticon.Model.TargetSite.Name
